"use client"

import { useState, useEffect } from "react"
import { 
  getAnalysisSummary, 
  getMonthlyOrdersChart, 
  getDeliveryDelayChart, 
  getTopCategoriesChart,
  getDemandForecast,
  getUploadedFiles
} from "../services/api"
import LoadingSpinner from "../components/LoadingSpinner"
import ErrorMessage from "../components/ErrorMessage"
import { useNavigate } from "react-router-dom"
import "./Dashboard.css"

const Dashboard = () => {
  const [summary, setSummary] = useState(null)
  const [monthlyOrders, setMonthlyOrders] = useState([])
  const [deliveryDelay, setDeliveryDelay] = useState([])
  const [topCategories, setTopCategories] = useState([])
  const [forecast, setForecast] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [retryCount, setRetryCount] = useState(0)
  const navigate = useNavigate()

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        // Check if files have been uploaded
        const uploadedFiles = await getUploadedFiles()
        if (uploadedFiles.length === 0) {
          navigate("/upload")
          return
        }

        setLoading(true)
        setError(null)

        // Fetch all necessary data in parallel
        const [
          summaryRes, 
          monthlyOrdersRes, 
          deliveryDelayRes,
          topCategoriesRes,
          forecastRes
        ] = await Promise.all([
          getAnalysisSummary(),
          getMonthlyOrdersChart(),
          getDeliveryDelayChart(),
          getTopCategoriesChart(),
          getDemandForecast()
        ])

        setSummary(summaryRes.data)
        setMonthlyOrders(monthlyOrdersRes.data.data)
        setDeliveryDelay(deliveryDelayRes.data.data)
        setTopCategories(topCategoriesRes.data.data)
        
        // Process forecast data - find overall forecast
        const overallForecast = forecastRes.data.find(item => item.category === "T·ªïng th·ªÉ")
        setForecast(overallForecast)
        
        setLoading(false)
      } catch (err) {
        console.error("Error fetching dashboard data:", err)
        setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu dashboard. Vui l√≤ng th·ª≠ l·∫°i sau.")
        setLoading(false)

        // Auto-retry up to 3 times
        if (retryCount < 3) {
          setTimeout(() => {
            setRetryCount((prev) => prev + 1)
          }, 5000)
        }
      }
    }

    fetchDashboardData()
  }, [navigate, retryCount])

  const handleRetry = () => {
    setRetryCount((prev) => prev + 1)
  }

  const navigateTo = (path) => {
    navigate(path)
  }

  if (loading)
    return (
      <LoadingSpinner message="ƒêang t·∫£i d·ªØ li·ªáu dashboard. Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t n·∫øu d·ªØ li·ªáu v·ª´a ƒë∆∞·ª£c t·∫£i l√™n." />
    )

  if (error)
    return (
      <div className="error-with-retry">
        <ErrorMessage message={error} />
        <button className="retry-button" onClick={handleRetry}>
          Th·ª≠ l·∫°i
        </button>
        <p className="retry-note">
          L∆∞u √Ω: Sau khi t·∫£i l√™n d·ªØ li·ªáu m·ªõi, h·ªá th·ªëng c·∫ßn th·ªùi gian ƒë·ªÉ x·ª≠ l√Ω v√† t√≠nh to√°n c√°c ph√¢n t√≠ch.
        </p>
      </div>
    )

  // Calculate key metrics
  // 1. Total orders
  const totalOrders = monthlyOrders.reduce((sum, item) => sum + item.value, 0)
  const lastMonthOrders = monthlyOrders[monthlyOrders.length - 1]?.value || 0
  const prevMonthOrders = monthlyOrders[monthlyOrders.length - 2]?.value || 0
  const orderGrowth = prevMonthOrders ? (((lastMonthOrders - prevMonthOrders) / prevMonthOrders) * 100).toFixed(1) : 0

  // 2. On-time delivery rate
  const onTimeDelivery = deliveryDelay.find((item) => item.status === "ƒê√∫ng h·∫°n")?.count || 0
  const lateDelivery = deliveryDelay.find((item) => item.status === "Tr·ªÖ")?.count || 0
  const totalDeliveries = onTimeDelivery + lateDelivery
  const onTimeRate = totalDeliveries ? ((onTimeDelivery / totalDeliveries) * 100).toFixed(1) : 0

  // 3. Product categories count
  const categoriesCount = Object.keys(summary?.top_categories || {}).length
  const topCategory = topCategories[0]?.category || "N/A"

  // 4. Forecast growth
  let nextForecastValue = 0
  let forecastGrowth = 0
  
  if (forecast && forecast.chart_data) {
    const actualData = forecast.chart_data.filter(item => item.type === "Th·ª±c t·∫ø")
    const forecastData = forecast.chart_data.filter(item => item.type === "XGBoost")
    
    const lastActualValue = actualData.length > 0 ? parseInt(actualData[actualData.length - 1].orders) : 0
    nextForecastValue = forecastData.length > 0 ? parseInt(forecastData[0].orders) : 0
    forecastGrowth = lastActualValue ? (((nextForecastValue - lastActualValue) / lastActualValue) * 100).toFixed(1) : 0
  }

  return (
    <div className="dashboard">
      <div className="dashboard-header">
        <h1 className="page-title">Supply Chain Analytics Dashboard</h1>
        <div className="dashboard-actions">
          <button onClick={() => navigateTo('/analysis')} className="action-button">
            Chi ti·∫øt ph√¢n t√≠ch
          </button>
          <button onClick={() => navigateTo('/forecast')} className="action-button primary">
            D·ª± b√°o nhu c·∫ßu
          </button>
          <button onClick={() => navigateTo('/reorder')} className="action-button">
            Chi·∫øn l∆∞·ª£c t·ªìn kho
          </button>
        </div>
      </div>

      {/* KPI Cards */}
      <div className="kpi-grid">
        <div className="kpi-card">
          <div className="kpi-icon box-icon">üì¶</div>
          <div className="kpi-content">
            <h3 className="kpi-title">T·ªïng ƒë∆°n h√†ng</h3>
            <div className="kpi-value">{totalOrders.toLocaleString()}</div>
            <div className={`kpi-detail ${Number(orderGrowth) >= 0 ? 'positive' : 'negative'}`}>
              {Number(orderGrowth) >= 0 ? '‚Üë' : '‚Üì'} {Math.abs(Number(orderGrowth))}% so v·ªõi th√°ng tr∆∞·ªõc
            </div>
          </div>
        </div>

        <div className="kpi-card">
          <div className="kpi-icon truck-icon">üöö</div>
          <div className="kpi-content">
            <h3 className="kpi-title">T·ª∑ l·ªá giao ƒë√∫ng h·∫°n</h3>
            <div className="kpi-value">{onTimeRate}%</div>
            <div className="kpi-detail">
              {onTimeDelivery.toLocaleString()} / {totalDeliveries.toLocaleString()} ƒë∆°n h√†ng
            </div>
          </div>
        </div>

        <div className="kpi-card">
          <div className="kpi-icon tag-icon">üè∑Ô∏è</div>
          <div className="kpi-content">
            <h3 className="kpi-title">Danh m·ª•c s·∫£n ph·∫©m</h3>
            <div className="kpi-value">{categoriesCount}</div>
            <div className="kpi-detail">
              Top danh m·ª•c: {topCategory}
            </div>
          </div>
        </div>

        <div className="kpi-card">
          <div className="kpi-icon chart-icon">üìà</div>
          <div className="kpi-content">
            <h3 className="kpi-title">D·ª± b√°o tƒÉng tr∆∞·ªüng</h3>
            <div className="kpi-value">{forecastGrowth}%</div>
            <div className="kpi-detail">
              D·ª± b√°o ti·∫øp theo: {nextForecastValue.toLocaleString()} ƒë∆°n
            </div>
          </div>
        </div>
      </div>

      {/* Dashboard tiles */}
      <div className="dashboard-tiles">
        {/* Analysis Section */}
        <div className="dashboard-tile">
          <h2 className="tile-title">Ph√¢n t√≠ch nhu c·∫ßu</h2>
          <div className="tile-content">
            <div className="analysis-metrics">
              <div className="metric">
                <div className="metric-label">Top danh m·ª•c</div>
                <div className="metric-value">{topCategory}</div>
              </div>
              <div className="metric">
                <div className="metric-label">ƒê·∫∑t h√†ng trung b√¨nh / th√°ng</div>
                <div className="metric-value">
                  {(totalOrders / (monthlyOrders.length || 1)).toFixed(0)}
                </div>
              </div>
              <div className="metric">
                <div className="metric-label">Giao h√†ng ƒë√∫ng h·∫°n</div>
                <div className="metric-value">{onTimeRate}%</div>
              </div>
            </div>
            <button onClick={() => navigateTo('/analysis')} className="tile-button">
              Xem ph√¢n t√≠ch chi ti·∫øt
            </button>
          </div>
        </div>

        {/* Forecast Section */}
        <div className="dashboard-tile">
          <h2 className="tile-title">D·ª± b√°o nhu c·∫ßu</h2>
          <div className="tile-content">
            <div className="forecast-metrics">
              <div className="metric">
                <div className="metric-label">D·ª± b√°o 6 th√°ng</div>
                <div className="metric-value">
                  {forecast?.forecast_table?.[forecast.forecast_table.length - 1]?.xgboost || "N/A"}
                </div>
              </div>
              <div className="metric">
                <div className="metric-label">M√¥ h√¨nh d·ª± b√°o</div>
                <div className="metric-value">XGBoost + ARIMA</div>
              </div>
              <div className="metric">
                <div className="metric-label">TƒÉng tr∆∞·ªüng d·ª± ki·∫øn</div>
                <div className="metric-value">{forecastGrowth}%</div>
              </div>
            </div>
            <button onClick={() => navigateTo('/forecast')} className="tile-button primary">
              Xem d·ª± b√°o chi ti·∫øt
            </button>
          </div>
        </div>

        {/* Inventory Section */}
        <div className="dashboard-tile">
          <h2 className="tile-title">T·ªëi ∆∞u t·ªìn kho</h2>
          <div className="tile-content">
            <div className="inventory-metrics">
              <div className="metric">
                <div className="metric-label">Danh m·ª•c t·ªìn kho</div>
                <div className="metric-value">{categoriesCount}</div>
              </div>
              <div className="metric">
                <div className="metric-label">Th·ªùi gian giao trung b√¨nh</div>
                <div className="metric-value">
                  {summary?.avg_shipping_duration_by_seller ? 
                    Object.values(summary.avg_shipping_duration_by_seller).reduce((sum, val) => sum + val, 0) / 
                    Object.values(summary.avg_shipping_duration_by_seller).length : "N/A"} ng√†y
                </div>
              </div>
              <div className="metric">
                <div className="metric-label">Chi ph√≠ v·∫≠n chuy·ªÉn</div>
                <div className="metric-value">
                  {summary?.avg_shipping_cost_by_category ?
                    (Object.values(summary.avg_shipping_cost_by_category).reduce((sum, val) => sum + val, 0) / 
                    Object.values(summary.avg_shipping_cost_by_category).length).toLocaleString() : "N/A"} ƒë
                </div>
              </div>
            </div>
            <button onClick={() => navigateTo('/reorder')} className="tile-button">
              Xem chi·∫øn l∆∞·ª£c t·ªìn kho
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Dashboard